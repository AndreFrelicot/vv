/** @file clitkResampleImage_ggo.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CLITKRESAMPLEIMAGE_GGO_H
#define CLITKRESAMPLEIMAGE_GGO_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_CLITKRESAMPLEIMAGE_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_CLITKRESAMPLEIMAGE_PACKAGE "clitkResampleImage"
#endif

#ifndef CMDLINE_PARSER_CLITKRESAMPLEIMAGE_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_CLITKRESAMPLEIMAGE_VERSION "2.0"
#endif

/** @brief Where the command line options are stored */
struct args_info_clitkResampleImage
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Config file.  */
  char * config_orig;	/**< @brief Config file original value given at command line.  */
  const char *config_help; /**< @brief Config file help description.  */
  int verbose_flag;	/**< @brief Verbose (default=off).  */
  const char *verbose_help; /**< @brief Verbose help description.  */
  int imagetypes_flag;	/**< @brief Verbose: allowed image types (default=off).  */
  const char *imagetypes_help; /**< @brief Verbose: allowed image types help description.  */
  int thread_arg;	/**< @brief Nb of thread to use (default=max).  */
  char * thread_orig;	/**< @brief Nb of thread to use (default=max) original value given at command line.  */
  const char *thread_help; /**< @brief Nb of thread to use (default=max) help description.  */
  char * input_arg;	/**< @brief Input image filename.  */
  char * input_orig;	/**< @brief Input image filename original value given at command line.  */
  const char *input_help; /**< @brief Input image filename help description.  */
  char * output_arg;	/**< @brief Output image filename.  */
  char * output_orig;	/**< @brief Output image filename original value given at command line.  */
  const char *output_help; /**< @brief Output image filename help description.  */
  char * like_arg;	/**< @brief Resample like this image.  */
  char * like_orig;	/**< @brief Resample like this image original value given at command line.  */
  const char *like_help; /**< @brief Resample like this image help description.  */
  int* size_arg;	/**< @brief Number of pixels of each coordonate (default='0').  */
  char ** size_orig;	/**< @brief Number of pixels of each coordonate original value given at command line.  */
  int size_min; /**< @brief Number of pixels of each coordonate's minimum occurreces */
  int size_max; /**< @brief Number of pixels of each coordonate's maximum occurreces */
  const char *size_help; /**< @brief Number of pixels of each coordonate help description.  */
  float* spacing_arg;	/**< @brief Spacing in mm between pixels (default='-1.0').  */
  char ** spacing_orig;	/**< @brief Spacing in mm between pixels original value given at command line.  */
  int spacing_min; /**< @brief Spacing in mm between pixels's minimum occurreces */
  int spacing_max; /**< @brief Spacing in mm between pixels's maximum occurreces */
  const char *spacing_help; /**< @brief Spacing in mm between pixels help description.  */
  float default_arg;	/**< @brief Default pixel value (default='0.0').  */
  char * default_orig;	/**< @brief Default pixel value original value given at command line.  */
  const char *default_help; /**< @brief Default pixel value help description.  */
  int time_flag;	/**< @brief Last Dimension Is Time -> do not resample it (auto on for 4D) (default=off).  */
  const char *time_help; /**< @brief Last Dimension Is Time -> do not resample it (auto on for 4D) help description.  */
  char * interp_arg;	/**< @brief Interpolation type: {nn, linear, bspline, blut} (default='nn').  */
  char * interp_orig;	/**< @brief Interpolation type: {nn, linear, bspline, blut} original value given at command line.  */
  const char *interp_help; /**< @brief Interpolation type: {nn, linear, bspline, blut} help description.  */
  int order_arg;	/**< @brief BSpline ordre (range 0-5) (default='3').  */
  char * order_orig;	/**< @brief BSpline ordre (range 0-5) original value given at command line.  */
  const char *order_help; /**< @brief BSpline ordre (range 0-5) help description.  */
  int sampling_arg;	/**< @brief BLUT sampling value (default='30').  */
  char * sampling_orig;	/**< @brief BLUT sampling value original value given at command line.  */
  const char *sampling_help; /**< @brief BLUT sampling value help description.  */
  float* gauss_arg;	/**< @brief Apply Gaussian before (sigma in mm) (default='0.0').  */
  char ** gauss_orig;	/**< @brief Apply Gaussian before (sigma in mm) original value given at command line.  */
  int gauss_min; /**< @brief Apply Gaussian before (sigma in mm)'s minimum occurreces */
  int gauss_max; /**< @brief Apply Gaussian before (sigma in mm)'s maximum occurreces */
  const char *gauss_help; /**< @brief Apply Gaussian before (sigma in mm) help description.  */
  int autogauss_flag;	/**< @brief Apply Gaussian with auto sigma when downsample (default=off).  */
  const char *autogauss_help; /**< @brief Apply Gaussian with auto sigma when downsample help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int imagetypes_given ;	/**< @brief Whether imagetypes was given.  */
  unsigned int thread_given ;	/**< @brief Whether thread was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int like_given ;	/**< @brief Whether like was given.  */
  unsigned int size_given ;	/**< @brief Whether size was given.  */
  unsigned int spacing_given ;	/**< @brief Whether spacing was given.  */
  unsigned int default_given ;	/**< @brief Whether default was given.  */
  unsigned int time_given ;	/**< @brief Whether time was given.  */
  unsigned int interp_given ;	/**< @brief Whether interp was given.  */
  unsigned int order_given ;	/**< @brief Whether order was given.  */
  unsigned int sampling_given ;	/**< @brief Whether sampling was given.  */
  unsigned int gauss_given ;	/**< @brief Whether gauss was given.  */
  unsigned int autogauss_given ;	/**< @brief Whether autogauss was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_clitkResampleImage_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure args_info_clitkResampleImage (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure args_info_clitkResampleImage (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *args_info_clitkResampleImage_purpose;
/** @brief the usage string of the program */
extern const char *args_info_clitkResampleImage_usage;
/** @brief all the lines making the help output */
extern const char *args_info_clitkResampleImage_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkResampleImage (int argc, char * const *argv,
  struct args_info_clitkResampleImage *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkResampleImage_ext() instead
 */
int cmdline_parser_clitkResampleImage2 (int argc, char * const *argv,
  struct args_info_clitkResampleImage *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkResampleImage_ext (int argc, char * const *argv,
  struct args_info_clitkResampleImage *args_info,
  struct cmdline_parser_clitkResampleImage_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkResampleImage_dump(FILE *outfile,
  struct args_info_clitkResampleImage *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkResampleImage_file_save(const char *filename,
  struct args_info_clitkResampleImage *args_info);

/**
 * Print the help
 */
void cmdline_parser_clitkResampleImage_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_clitkResampleImage_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_clitkResampleImage_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_clitkResampleImage_params_init(struct cmdline_parser_clitkResampleImage_params *params);

/**
 * Allocates dynamically a cmdline_parser_clitkResampleImage_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_clitkResampleImage_params structure
 */
struct cmdline_parser_clitkResampleImage_params *cmdline_parser_clitkResampleImage_params_create(void);

/**
 * Initializes the passed args_info_clitkResampleImage structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_clitkResampleImage_init (struct args_info_clitkResampleImage *args_info);
/**
 * Deallocates the string fields of the args_info_clitkResampleImage structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_clitkResampleImage_free (struct args_info_clitkResampleImage *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkResampleImage_config_file() instead
 */
int cmdline_parser_clitkResampleImage_configfile (char * const filename,
  struct args_info_clitkResampleImage *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkResampleImage_config_file (char * const filename,
  struct args_info_clitkResampleImage *args_info,
  struct cmdline_parser_clitkResampleImage_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_clitkResampleImage_required (struct args_info_clitkResampleImage *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CLITKRESAMPLEIMAGE_GGO_H */
