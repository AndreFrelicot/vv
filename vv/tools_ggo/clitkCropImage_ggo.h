/** @file clitkCropImage_ggo.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CLITKCROPIMAGE_GGO_H
#define CLITKCROPIMAGE_GGO_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_CLITKCROPIMAGE_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_CLITKCROPIMAGE_PACKAGE "clitkCropImage"
#endif

#ifndef CMDLINE_PARSER_CLITKCROPIMAGE_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_CLITKCROPIMAGE_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct args_info_clitkCropImage
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Config file.  */
  char * config_orig;	/**< @brief Config file original value given at command line.  */
  const char *config_help; /**< @brief Config file help description.  */
  int imagetypes_flag;	/**< @brief Display allowed image types (default=off).  */
  const char *imagetypes_help; /**< @brief Display allowed image types help description.  */
  int verbose_flag;	/**< @brief Verbose (default=off).  */
  const char *verbose_help; /**< @brief Verbose help description.  */
  int verboseOption_flag;	/**< @brief Display options values (default=off).  */
  const char *verboseOption_help; /**< @brief Display options values help description.  */
  int verboseWarningOff_flag;	/**< @brief Do not display warning (default=off).  */
  const char *verboseWarningOff_help; /**< @brief Do not display warning help description.  */
  char * input_arg;	/**< @brief Input image filename.  */
  char * input_orig;	/**< @brief Input image filename original value given at command line.  */
  const char *input_help; /**< @brief Input image filename help description.  */
  char * output_arg;	/**< @brief Output image filename.  */
  char * output_orig;	/**< @brief Output image filename original value given at command line.  */
  const char *output_help; /**< @brief Output image filename help description.  */
  int* boundingBox_arg;	/**< @brief Bounding box of the crop region (in 3D: =x1,x2,y1,y2,z1,z2).  */
  char ** boundingBox_orig;	/**< @brief Bounding box of the crop region (in 3D: =x1,x2,y1,y2,z1,z2) original value given at command line.  */
  int boundingBox_min; /**< @brief Bounding box of the crop region (in 3D: =x1,x2,y1,y2,z1,z2)'s minimum occurreces */
  int boundingBox_max; /**< @brief Bounding box of the crop region (in 3D: =x1,x2,y1,y2,z1,z2)'s maximum occurreces */
  const char *boundingBox_help; /**< @brief Bounding box of the crop region (in 3D: =x1,x2,y1,y2,z1,z2) help description.  */
  int* lower_arg;	/**< @brief Size of the lower crop region (multiple values).  */
  char ** lower_orig;	/**< @brief Size of the lower crop region (multiple values) original value given at command line.  */
  int lower_min; /**< @brief Size of the lower crop region (multiple values)'s minimum occurreces */
  int lower_max; /**< @brief Size of the lower crop region (multiple values)'s maximum occurreces */
  const char *lower_help; /**< @brief Size of the lower crop region (multiple values) help description.  */
  int* upper_arg;	/**< @brief Size of the upper crop region (multiple values).  */
  char ** upper_orig;	/**< @brief Size of the upper crop region (multiple values) original value given at command line.  */
  int upper_min; /**< @brief Size of the upper crop region (multiple values)'s minimum occurreces */
  int upper_max; /**< @brief Size of the upper crop region (multiple values)'s maximum occurreces */
  const char *upper_help; /**< @brief Size of the upper crop region (multiple values) help description.  */
  int origin_flag;	/**< @brief Set new origin to zero (default=off).  */
  const char *origin_help; /**< @brief Set new origin to zero help description.  */
  double BG_arg;	/**< @brief Background value in input. (default='0').  */
  char * BG_orig;	/**< @brief Background value in input. original value given at command line.  */
  const char *BG_help; /**< @brief Background value in input. help description.  */
  char * like_arg;	/**< @brief Crop like this image (must have the same spacing.  */
  char * like_orig;	/**< @brief Crop like this image (must have the same spacing original value given at command line.  */
  const char *like_help; /**< @brief Crop like this image (must have the same spacing help description.  */
  double BGLike_arg;	/**< @brief Background value in output (if like larger) (default='0').  */
  char * BGLike_orig;	/**< @brief Background value in output (if like larger) original value given at command line.  */
  const char *BGLike_help; /**< @brief Background value in output (if like larger) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int imagetypes_given ;	/**< @brief Whether imagetypes was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int verboseOption_given ;	/**< @brief Whether verboseOption was given.  */
  unsigned int verboseWarningOff_given ;	/**< @brief Whether verboseWarningOff was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int boundingBox_given ;	/**< @brief Whether boundingBox was given.  */
  unsigned int lower_given ;	/**< @brief Whether lower was given.  */
  unsigned int upper_given ;	/**< @brief Whether upper was given.  */
  unsigned int origin_given ;	/**< @brief Whether origin was given.  */
  unsigned int BG_given ;	/**< @brief Whether BG was given.  */
  unsigned int like_given ;	/**< @brief Whether like was given.  */
  unsigned int BGLike_given ;	/**< @brief Whether BGLike was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_clitkCropImage_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure args_info_clitkCropImage (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure args_info_clitkCropImage (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *args_info_clitkCropImage_purpose;
/** @brief the usage string of the program */
extern const char *args_info_clitkCropImage_usage;
/** @brief all the lines making the help output */
extern const char *args_info_clitkCropImage_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkCropImage (int argc, char * const *argv,
  struct args_info_clitkCropImage *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkCropImage_ext() instead
 */
int cmdline_parser_clitkCropImage2 (int argc, char * const *argv,
  struct args_info_clitkCropImage *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkCropImage_ext (int argc, char * const *argv,
  struct args_info_clitkCropImage *args_info,
  struct cmdline_parser_clitkCropImage_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkCropImage_dump(FILE *outfile,
  struct args_info_clitkCropImage *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkCropImage_file_save(const char *filename,
  struct args_info_clitkCropImage *args_info);

/**
 * Print the help
 */
void cmdline_parser_clitkCropImage_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_clitkCropImage_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_clitkCropImage_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_clitkCropImage_params_init(struct cmdline_parser_clitkCropImage_params *params);

/**
 * Allocates dynamically a cmdline_parser_clitkCropImage_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_clitkCropImage_params structure
 */
struct cmdline_parser_clitkCropImage_params *cmdline_parser_clitkCropImage_params_create(void);

/**
 * Initializes the passed args_info_clitkCropImage structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_clitkCropImage_init (struct args_info_clitkCropImage *args_info);
/**
 * Deallocates the string fields of the args_info_clitkCropImage structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_clitkCropImage_free (struct args_info_clitkCropImage *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkCropImage_config_file() instead
 */
int cmdline_parser_clitkCropImage_configfile (char * const filename,
  struct args_info_clitkCropImage *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkCropImage_config_file (char * const filename,
  struct args_info_clitkCropImage *args_info,
  struct cmdline_parser_clitkCropImage_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_clitkCropImage_required (struct args_info_clitkCropImage *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CLITKCROPIMAGE_GGO_H */
