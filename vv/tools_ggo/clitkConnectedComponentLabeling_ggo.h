/** @file clitkConnectedComponentLabeling_ggo.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CLITKCONNECTEDCOMPONENTLABELING_GGO_H
#define CLITKCONNECTEDCOMPONENTLABELING_GGO_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_CLITKCONNECTEDCOMPONENTLABELING_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_CLITKCONNECTEDCOMPONENTLABELING_PACKAGE "clitkConnectedComponentLabeling"
#endif

#ifndef CMDLINE_PARSER_CLITKCONNECTEDCOMPONENTLABELING_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_CLITKCONNECTEDCOMPONENTLABELING_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct args_info_clitkConnectedComponentLabeling
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Config file.  */
  char * config_orig;	/**< @brief Config file original value given at command line.  */
  const char *config_help; /**< @brief Config file help description.  */
  int verbose_flag;	/**< @brief Verbose (default=off).  */
  const char *verbose_help; /**< @brief Verbose help description.  */
  int imagetypes_flag;	/**< @brief Display allowed image types (default=off).  */
  const char *imagetypes_help; /**< @brief Display allowed image types help description.  */
  int verboseOption_flag;	/**< @brief Display options values (default=off).  */
  const char *verboseOption_help; /**< @brief Display options values help description.  */
  char * input_arg;	/**< @brief Input image filename.  */
  char * input_orig;	/**< @brief Input image filename original value given at command line.  */
  const char *input_help; /**< @brief Input image filename help description.  */
  int inputBG_arg;	/**< @brief Input Background (default='0').  */
  char * inputBG_orig;	/**< @brief Input Background original value given at command line.  */
  const char *inputBG_help; /**< @brief Input Background help description.  */
  char * output_arg;	/**< @brief Output filename.  */
  char * output_orig;	/**< @brief Output filename original value given at command line.  */
  const char *output_help; /**< @brief Output filename help description.  */
  int minSize_arg;	/**< @brief Minimum component size in voxels (default='100').  */
  char * minSize_orig;	/**< @brief Minimum component size in voxels original value given at command line.  */
  const char *minSize_help; /**< @brief Minimum component size in voxels help description.  */
  int full_flag;	/**< @brief Full connecticity (default=off).  */
  const char *full_help; /**< @brief Full connecticity help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int imagetypes_given ;	/**< @brief Whether imagetypes was given.  */
  unsigned int verboseOption_given ;	/**< @brief Whether verboseOption was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int inputBG_given ;	/**< @brief Whether inputBG was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int minSize_given ;	/**< @brief Whether minSize was given.  */
  unsigned int full_given ;	/**< @brief Whether full was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_clitkConnectedComponentLabeling_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure args_info_clitkConnectedComponentLabeling (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure args_info_clitkConnectedComponentLabeling (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *args_info_clitkConnectedComponentLabeling_purpose;
/** @brief the usage string of the program */
extern const char *args_info_clitkConnectedComponentLabeling_usage;
/** @brief all the lines making the help output */
extern const char *args_info_clitkConnectedComponentLabeling_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkConnectedComponentLabeling (int argc, char * const *argv,
  struct args_info_clitkConnectedComponentLabeling *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkConnectedComponentLabeling_ext() instead
 */
int cmdline_parser_clitkConnectedComponentLabeling2 (int argc, char * const *argv,
  struct args_info_clitkConnectedComponentLabeling *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkConnectedComponentLabeling_ext (int argc, char * const *argv,
  struct args_info_clitkConnectedComponentLabeling *args_info,
  struct cmdline_parser_clitkConnectedComponentLabeling_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkConnectedComponentLabeling_dump(FILE *outfile,
  struct args_info_clitkConnectedComponentLabeling *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkConnectedComponentLabeling_file_save(const char *filename,
  struct args_info_clitkConnectedComponentLabeling *args_info);

/**
 * Print the help
 */
void cmdline_parser_clitkConnectedComponentLabeling_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_clitkConnectedComponentLabeling_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_clitkConnectedComponentLabeling_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_clitkConnectedComponentLabeling_params_init(struct cmdline_parser_clitkConnectedComponentLabeling_params *params);

/**
 * Allocates dynamically a cmdline_parser_clitkConnectedComponentLabeling_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_clitkConnectedComponentLabeling_params structure
 */
struct cmdline_parser_clitkConnectedComponentLabeling_params *cmdline_parser_clitkConnectedComponentLabeling_params_create(void);

/**
 * Initializes the passed args_info_clitkConnectedComponentLabeling structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_clitkConnectedComponentLabeling_init (struct args_info_clitkConnectedComponentLabeling *args_info);
/**
 * Deallocates the string fields of the args_info_clitkConnectedComponentLabeling structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_clitkConnectedComponentLabeling_free (struct args_info_clitkConnectedComponentLabeling *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkConnectedComponentLabeling_config_file() instead
 */
int cmdline_parser_clitkConnectedComponentLabeling_configfile (char * const filename,
  struct args_info_clitkConnectedComponentLabeling *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkConnectedComponentLabeling_config_file (char * const filename,
  struct args_info_clitkConnectedComponentLabeling *args_info,
  struct cmdline_parser_clitkConnectedComponentLabeling_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_clitkConnectedComponentLabeling_required (struct args_info_clitkConnectedComponentLabeling *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CLITKCONNECTEDCOMPONENTLABELING_GGO_H */
