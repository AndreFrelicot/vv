/** @file clitkRegionGrowing_ggo.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CLITKREGIONGROWING_GGO_H
#define CLITKREGIONGROWING_GGO_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_CLITKREGIONGROWING_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_CLITKREGIONGROWING_PACKAGE "clitkRegionGrowing"
#endif

#ifndef CMDLINE_PARSER_CLITKREGIONGROWING_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_CLITKREGIONGROWING_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct args_info_clitkRegionGrowing
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Config file.  */
  char * config_orig;	/**< @brief Config file original value given at command line.  */
  const char *config_help; /**< @brief Config file help description.  */
  int verbose_flag;	/**< @brief Verbose (default=off).  */
  const char *verbose_help; /**< @brief Verbose help description.  */
  char * input_arg;	/**< @brief Input image filename.  */
  char * input_orig;	/**< @brief Input image filename original value given at command line.  */
  const char *input_help; /**< @brief Input image filename help description.  */
  char * output_arg;	/**< @brief Output image filename.  */
  char * output_orig;	/**< @brief Output image filename original value given at command line.  */
  const char *output_help; /**< @brief Output image filename help description.  */
  int type_arg;	/**< @brief Region growing filter type: 0=threshold , 1=neighborhood-threshold , 2=confidence , 3= locally-adaptive-threshold, 4= explosion-controlled-threshold (default='0').  */
  char * type_orig;	/**< @brief Region growing filter type: 0=threshold , 1=neighborhood-threshold , 2=confidence , 3= locally-adaptive-threshold, 4= explosion-controlled-threshold original value given at command line.  */
  const char *type_help; /**< @brief Region growing filter type: 0=threshold , 1=neighborhood-threshold , 2=confidence , 3= locally-adaptive-threshold, 4= explosion-controlled-threshold help description.  */
  double lower_arg;	/**< @brief 1,2,3,4: Lower threshold value (default='310').  */
  char * lower_orig;	/**< @brief 1,2,3,4: Lower threshold value original value given at command line.  */
  const char *lower_help; /**< @brief 1,2,3,4: Lower threshold value help description.  */
  double upper_arg;	/**< @brief 1,2,3,4: Upper threshold value (default='4000').  */
  char * upper_orig;	/**< @brief 1,2,3,4: Upper threshold value original value given at command line.  */
  const char *upper_help; /**< @brief 1,2,3,4: Upper threshold value help description.  */
  double maxUpper_arg;	/**< @brief 4: Maximum upper threshold value (default='2000').  */
  char * maxUpper_orig;	/**< @brief 4: Maximum upper threshold value original value given at command line.  */
  const char *maxUpper_help; /**< @brief 4: Maximum upper threshold value help description.  */
  double minLower_arg;	/**< @brief 4: Minimum lower threshold value (default='-1000').  */
  char * minLower_orig;	/**< @brief 4: Minimum lower threshold value original value given at command line.  */
  const char *minLower_help; /**< @brief 4: Minimum lower threshold value help description.  */
  double step_arg;	/**< @brief 4: Threshold step size (default='64.0').  */
  char * step_orig;	/**< @brief 4: Threshold step size original value given at command line.  */
  const char *step_help; /**< @brief 4: Threshold step size help description.  */
  double minStep_arg;	/**< @brief 4: Minimum threshold step size (default='1').  */
  char * minStep_orig;	/**< @brief 4: Minimum threshold step size original value given at command line.  */
  const char *minStep_help; /**< @brief 4: Minimum threshold step size help description.  */
  int adaptLower_flag;	/**< @brief 3,4: (locally) adapt lower thresholding (default=off).  */
  const char *adaptLower_help; /**< @brief 3,4: (locally) adapt lower thresholding help description.  */
  int adaptUpper_flag;	/**< @brief 3,4: (locally) adapt upper thresholding (default=off).  */
  const char *adaptUpper_help; /**< @brief 3,4: (locally) adapt upper thresholding help description.  */
  double multiplier_arg;	/**< @brief 2-4: (2-3) accept if within mean+-mutiplier*SD, (4) explosion if size increases multiplier times (default='2.0').  */
  char * multiplier_orig;	/**< @brief 2-4: (2-3) accept if within mean+-mutiplier*SD, (4) explosion if size increases multiplier times original value given at command line.  */
  const char *multiplier_help; /**< @brief 2-4: (2-3) accept if within mean+-mutiplier*SD, (4) explosion if size increases multiplier times help description.  */
  int* seed_arg;	/**< @brief Seed index postion (in voxels) (default='0').  */
  char ** seed_orig;	/**< @brief Seed index postion (in voxels) original value given at command line.  */
  int seed_min; /**< @brief Seed index postion (in voxels)'s minimum occurreces */
  int seed_max; /**< @brief Seed index postion (in voxels)'s maximum occurreces */
  const char *seed_help; /**< @brief Seed index postion (in voxels) help description.  */
  int* seedRadius_arg;	/**< @brief Radius used for seed dilatation(in voxel) (default='0').  */
  char ** seedRadius_orig;	/**< @brief Radius used for seed dilatation(in voxel) original value given at command line.  */
  int seedRadius_min; /**< @brief Radius used for seed dilatation(in voxel)'s minimum occurreces */
  int seedRadius_max; /**< @brief Radius used for seed dilatation(in voxel)'s maximum occurreces */
  const char *seedRadius_help; /**< @brief Radius used for seed dilatation(in voxel) help description.  */
  double pad_arg;	/**< @brief The replace padding value (default='1.0').  */
  char * pad_orig;	/**< @brief The replace padding value original value given at command line.  */
  const char *pad_help; /**< @brief The replace padding value help description.  */
  int* radius_arg;	/**< @brief 1-3: The radius of the neighborhood (default='1').  */
  char ** radius_orig;	/**< @brief 1-3: The radius of the neighborhood original value given at command line.  */
  int radius_min; /**< @brief 1-3: The radius of the neighborhood's minimum occurreces */
  int radius_max; /**< @brief 1-3: The radius of the neighborhood's maximum occurreces */
  const char *radius_help; /**< @brief 1-3: The radius of the neighborhood help description.  */
  double maxSD_arg;	/**< @brief 3: Limit to SD.  */
  char * maxSD_orig;	/**< @brief 3: Limit to SD original value given at command line.  */
  const char *maxSD_help; /**< @brief 3: Limit to SD help description.  */
  int full_flag;	/**< @brief 4: use full connectivity (not implemented yet) (default=off).  */
  const char *full_help; /**< @brief 4: use full connectivity (not implemented yet) help description.  */
  int iter_arg;	/**< @brief 2: Iterations (default='5').  */
  char * iter_orig;	/**< @brief 2: Iterations original value given at command line.  */
  const char *iter_help; /**< @brief 2: Iterations help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int type_given ;	/**< @brief Whether type was given.  */
  unsigned int lower_given ;	/**< @brief Whether lower was given.  */
  unsigned int upper_given ;	/**< @brief Whether upper was given.  */
  unsigned int maxUpper_given ;	/**< @brief Whether maxUpper was given.  */
  unsigned int minLower_given ;	/**< @brief Whether minLower was given.  */
  unsigned int step_given ;	/**< @brief Whether step was given.  */
  unsigned int minStep_given ;	/**< @brief Whether minStep was given.  */
  unsigned int adaptLower_given ;	/**< @brief Whether adaptLower was given.  */
  unsigned int adaptUpper_given ;	/**< @brief Whether adaptUpper was given.  */
  unsigned int multiplier_given ;	/**< @brief Whether multiplier was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int seedRadius_given ;	/**< @brief Whether seedRadius was given.  */
  unsigned int pad_given ;	/**< @brief Whether pad was given.  */
  unsigned int radius_given ;	/**< @brief Whether radius was given.  */
  unsigned int maxSD_given ;	/**< @brief Whether maxSD was given.  */
  unsigned int full_given ;	/**< @brief Whether full was given.  */
  unsigned int iter_given ;	/**< @brief Whether iter was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_clitkRegionGrowing_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure args_info_clitkRegionGrowing (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure args_info_clitkRegionGrowing (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *args_info_clitkRegionGrowing_purpose;
/** @brief the usage string of the program */
extern const char *args_info_clitkRegionGrowing_usage;
/** @brief all the lines making the help output */
extern const char *args_info_clitkRegionGrowing_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkRegionGrowing (int argc, char * const *argv,
  struct args_info_clitkRegionGrowing *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkRegionGrowing_ext() instead
 */
int cmdline_parser_clitkRegionGrowing2 (int argc, char * const *argv,
  struct args_info_clitkRegionGrowing *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkRegionGrowing_ext (int argc, char * const *argv,
  struct args_info_clitkRegionGrowing *args_info,
  struct cmdline_parser_clitkRegionGrowing_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkRegionGrowing_dump(FILE *outfile,
  struct args_info_clitkRegionGrowing *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkRegionGrowing_file_save(const char *filename,
  struct args_info_clitkRegionGrowing *args_info);

/**
 * Print the help
 */
void cmdline_parser_clitkRegionGrowing_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_clitkRegionGrowing_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_clitkRegionGrowing_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_clitkRegionGrowing_params_init(struct cmdline_parser_clitkRegionGrowing_params *params);

/**
 * Allocates dynamically a cmdline_parser_clitkRegionGrowing_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_clitkRegionGrowing_params structure
 */
struct cmdline_parser_clitkRegionGrowing_params *cmdline_parser_clitkRegionGrowing_params_create(void);

/**
 * Initializes the passed args_info_clitkRegionGrowing structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_clitkRegionGrowing_init (struct args_info_clitkRegionGrowing *args_info);
/**
 * Deallocates the string fields of the args_info_clitkRegionGrowing structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_clitkRegionGrowing_free (struct args_info_clitkRegionGrowing *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_clitkRegionGrowing_config_file() instead
 */
int cmdline_parser_clitkRegionGrowing_configfile (char * const filename,
  struct args_info_clitkRegionGrowing *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_clitkRegionGrowing_config_file (char * const filename,
  struct args_info_clitkRegionGrowing *args_info,
  struct cmdline_parser_clitkRegionGrowing_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_clitkRegionGrowing_required (struct args_info_clitkRegionGrowing *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CLITKREGIONGROWING_GGO_H */
